{"version":3,"file":"tea.es6.js","sources":["../src/tea.js"],"sourcesContent":["/* global Map:readonly, Set:readonly, ArrayBuffer:readonly */\n\nfunction AssertionError(message, actual, expected, operator) {\n  var error = Error.call(this, message)\n\n  error.name = \"AssertionError\"\n  error.message = error.message\n  error.stack = error.stack\n  // custom properties\n  error.actual = actual\n  error.expected = expected\n  error.operator = operator\n\n  return error\n}\n\nAssertionError.prototype = Object.create(Error.prototype)\nAssertionError.prototype = Object.create\n  ? Object.create(Error.prototype)\n  : new Error()\n\nAssertionError.prototype.constructor = AssertionError\n\n// Assertion error to string\nAssertionError.prototype.toString = function() {\n  return this.name + \": \" + this.message\n}\n\n// ponyfill\nError.captureStackTrace =\n  Error.captureStackTrace ||\n  function(error) {\n    var container = new Error()\n\n    Object.defineProperty(error, \"stack\", {\n      configurable: true,\n      get: function getStack() {\n        var stack = container.stack\n\n        Object.defineProperty(this, \"stack\", { value: stack })\n\n        return stack\n      }\n    })\n  }\n\n// main test suite app\n//\n// @TODO:\n//\n// 1. DONE assert should return AssertionError, with 'expected', 'actual', 'operator' fields\n//\n// 2. improve Node/Browser consistency:\n//   - polyfill Error.prepareStackTrace and Error.captureStackTrace\n//\n// 3. DONE add CLI, with these option: --fail-fast --report=tap|console|debug\n//\n// 4. DONE add more assertions, inc deep-equal\n//\n// 5. DONE more flexible syntax:\n//\n//   - add aliases 'feature', 'scenario', 'describe' & 'group' for test function\n//\n// 6. DONE add test.beforeEach(), test.beforeAll(), test.afterEach(), etc\n//\n// 7. support for React.. See:\n//\n//   - DONE https://github.com/FormidableLabs/react-fast-compare\n//   - https://github.com/algolia/react-element-to-jsx-string\n//   - https://gist.github.com/kolodny/f0b35a7e2c0236f7b956\n//\n// 8. use fs-remote to write files to filesystem from browser\n//    (when running locally - fs-remote runs a server on localhost)\n//\n// 9. cypress-like browser UI for running tests and viewing results\n//\n//   - split view, tea menu on left, app to test on right\n//   - in menu:\n//     - button to add test (opens modal popup)\n//     - button to run tests\n//     - show test results in nicely formatted HTML\n//\n// 10. DONE refactor assertions:\n//\n//   a. make more DRY\n//   c. assertion runner should handle adding passes/fails/total\n//\n// 11. tea.visit(), tea.request(), tea.$, etc (copy cypress cy.foo() stuff)\n//\n//   use querySelector/ajax, or phantomjs as backend, to open page and do stuff\n//\n// 12. DONE easier setup: in importing 'tea', it should add 'assert' etc to the\n//     global scope, whatever that might be (global, window, root, parent module, etc)\n//\n// 13. DONE group nested tests (supprts grouping by 'scenario', 'feature', 'group', 'describe')\n//\n// 14. DONE implement console reporter (works in Node and Browser Dev Tools)\n//\n// 15. DONE implement TAP reporter\n\ntry {\n  var global = Function(\"return this\")()\n} catch (e) {\n  var global = this\n}\n\nvar tea = function() {\n  tea.args = tea.isNode ? tea.getArgs() : {}\n\n  if (tea.isBrowser) {\n    console.clear()\n  }\n  // code from browser-or-node package, to detect current environment\n  global.scenario = tea.scenario\n  global.group = tea.scenario\n  global.feature = tea.scenario\n  global.test = tea.test\n  global.expect = tea.expect\n  global.assert = tea.assert\n  global.t = tea.t\n  global.run = tea.run\n  // syntax like jasmine, mocha, chai\n  global.describe = tea.scenario\n  global.it = tea.test\n  global.should = tea.expect\n  // generic BDD like Gherkin\n  global.given = tea.scenario\n  global.when = tea.test\n  global.then = tea.expect\n  // return main\n  global.tea = tea\n\n  return tea\n}\n\ntea.isBrowser =\n  typeof window !== \"undefined\" && typeof window.document !== \"undefined\"\n\n/* eslint-disable no-restricted-globals */\ntea.isWebWorker =\n  typeof global === \"object\" &&\n  global.constructor &&\n  global.constructor.name === \"DedicatedWorkerGlobalScope\"\n/* eslint-enable no-restricted-globals */\n\ntea.isNode =\n  typeof process !== \"undefined\" &&\n  process.versions !== null &&\n  process.versions.node !== null\n\n// parsing CLI option in Node:\ntea.getArgs = function() {\n  if (typeof process === \"undefined\") {\n    return {}\n  }\n  var args = {}\n\n  process.argv.slice(2, process.argv.length).forEach(function(arg) {\n    // long arg\n    if (arg.slice(0, 2) === \"--\") {\n      var longArg = arg.split(\"=\")\n      var longArgFlag = longArg[0].slice(2, longArg[0].length)\n      var longArgValue = longArg.length > 1 ? longArg[1] : true\n\n      args[longArgFlag] = longArgValue\n    }\n    // flags\n    else if (arg[0] === \"-\") {\n      var flags = arg.slice(1, arg.length).split(\"\")\n\n      flags.forEach(function(flag) {\n        args[flag] = true\n      })\n    }\n  })\n  tea.args = args\n  tea.setArgs()\n\n  return args\n}\n\ntea.setArgs = function() {\n  // process command-line options: allow user to override default settings\n  Object.keys(tea.args).forEach(function(key) {\n    var value = tea.args[key]\n\n    switch (key) {\n      case \"no-indent\":\n        if (value === \"true\" || value === true) {\n          tea.noIndent = true\n        }\n        break\n      case \"q\":\n      case \"quiet\":\n        if (value === \"true\" || value === true) {\n          tea.quiet = true\n        }\n        break\n      case \"nt\":\n      case \"no-totals\":\n        if (value === \"true\" || value === true) {\n          tea.noTotals = true\n        }\n        break\n      case \"fail-fast\":\n      case \"ff\":\n        if (value === \"true\" || value === true) {\n          tea.failFast = true\n        }\n        break\n      // set the output format\n      case \"format\":\n        if (value === \"node\") {\n          value = \"console\"\n        }\n        if (value === \"terminal\") {\n          value = \"console\"\n        }\n        if (value === \"devtools\") {\n          value = \"console\"\n        }\n        tea.reportFormat = value\n        break\n      // print help info\n      case \"help\":\n      case \"h\":\n        if (value) {\n          console.log(\"\\nUsage:  node path/to/tests.js [options]\")\n          console.log(\"\\nOptions:\\n\")\n          console.log(\"  --quiet            Only list failing tests\")\n          console.log(\"  --fail-fast        Exit after first failing test\")\n          console.log(\n            \"  --verbose          List the actual/expected results of passing tests too\"\n          )\n          console.log(\n            \"  --format=<name>    The style/format of the test results (console|debug|tap)\"\n          )\n          console.log(\n            \"  --no-indent        Don't indent grouped test results (useful if piping to TAP prettifiers)\"\n          )\n          console.log(\"  --help             Show this help screen\\n\")\n        }\n        if (tea.isNode && typeof process !== \"undefined\") {\n          process.exit(0)\n        }\n        break\n      // do nothing\n      default:\n        break\n    }\n  })\n}\n\n//\n// let's start our test suite and default settings\n//\ntea.args = tea.args || {}\ntea.tests = []\ntea.testResults = []\ntea.passes = 0\ntea.fails = 0\n// settings\ntea.failFast = false // exit after first tests fails or not\ntea.quiet = false // if true, only show failing tests\ntea.reportFormat = \"console\" // choose what format to report test results\n// used to format the test results\ntea.indent = 2\ntea.indentStr = \"\"\n\n// holder var, used to pass the current test between test() and assert()\ntea.currentTest = {}\n\n// the function we use for grouping and indenting tests\ntea.scenario = function(msg, fn) {\n  tea.tests.push({\n    msg: msg,\n    indentStr: tea.indentStr,\n    group: true\n  })\n  tea.addIndent()\n  fn()\n  tea.rmIndent()\n}\n\n// test harness - setup the test object, add it to tests array\ntea.test = function(msg, fn, expected) {\n  if (expected === undefined) {\n    expected = \"nowt\"\n  }\n  tea.currentTest = {\n    msg: msg,\n    indentStr: tea.indentStr,\n    status: \"pass\",\n    assertions: [],\n    expected: expected,\n    passes: null,\n    fails: null,\n    total: null,\n    result: null,\n    stack: null,\n    fn: fn\n  }\n\n  tea.currentTest.beforeAll = tea.test.beforeAll || function() {}\n  tea.currentTest.beforeEach = tea.test.beforeEach || function() {}\n  tea.currentTest.afterAll = tea.test.afterAll || function() {}\n  tea.currentTest.afterEach = tea.test.afterEach || function() {}\n\n  tea.tests.push(tea.currentTest)\n  tea.currentTest = tea.tests[tea.tests.length - 1]\n}\n\n// our various assertion methods call this func to register passes/fails with\n// the currentTest object for our reporters to work OK..\ntea.assertHarness = function(assertion, msg, actual, expected, operator) {\n  tea.assertHarness.result = null\n  tea.assertHarness.operator = operator || \"strict equals\"\n  tea.currentTest.total += 1\n\n  tea.assertHarness.result = assertion\n\n  if (\n    operator.toLowerCase() === \"falsey\" &&\n    Boolean(tea.assertHarness.result)\n  ) {\n    // it was indeed falsey, so result is true\n    tea.assertHarness.result = true\n  }\n\n  if (!tea.assertHarness.result) {\n    tea.assertHarness.result = new AssertionError(\n      msg,\n      actual,\n      expected,\n      tea.assertHarness.operator\n    )\n    tea.currentTest.fails += 1\n  } else {\n    tea.currentTest.passes += 1\n  }\n  tea.assertHarness.stack = tea.assertHarness.result.stack\n\n  tea.currentTest.assertions.push({\n    actual: actual,\n    expected: expected,\n    operator: tea.assertHarness.operator,\n    result: tea.assertHarness.result,\n    msg: msg\n  })\n\n  return tea.assertHarness.result\n}\n\n// runs the given assertion, records the results to current test object\ntea.expect = function(msg, fn, expected) {\n  tea.expect.result = null\n  tea.expect.expected = expected !== undefined ? expected : true\n  tea.currentTest.total += 1\n\n  if (typeof fn === \"function\") {\n    try {\n      tea.expect.result = fn() === tea.expect.expected\n      tea.currentTest.passes += 1\n    } catch (e) {\n      tea.currentTest.fails += 1\n      tea.expect.result = new AssertionError(\n        msg,\n        fn,\n        tea.expect.expected,\n        \"boolean\"\n      )\n    }\n  } else {\n    // we were given an expression\n    tea.expect.result = fn === expected\n    if (tea.expect.result) {\n      tea.currentTest.passes += 1\n    } else {\n      tea.currentTest.fails += 1\n      tea.expect.result = new AssertionError(\n        msg,\n        fn,\n        tea.expect.expected,\n        \"boolean\"\n      )\n    }\n  }\n\n  tea.currentTest.assertions.push({\n    actual: typeof fn === \"function\" ? fn() : fn,\n    expected: tea.expect.expected,\n    operator: \"boolean\",\n    result: tea.expect.result,\n    msg: msg\n  })\n\n  return tea.expect.result\n}\n\n// react-compatible deep equals function (from react-fast-compare@3.0.1)\ntea.deepEquals = function(a, b) {\n  if (a === b) {\n    return true\n  }\n\n  // START: fast-deep-equal es6/index.js 3.1.1\n  var hasElementType = typeof Element !== \"undefined\"\n  var hasMap = typeof Map === \"function\"\n  var hasSet = typeof Set === \"function\"\n  var hasArrayBuffer = typeof ArrayBuffer === \"function\"\n\n  if (a && b && typeof a === \"object\" && typeof b === \"object\") {\n    if (a.constructor !== b.constructor) {\n      return false\n    }\n\n    var length, i, keys\n\n    if (Array.isArray(a)) {\n      length = a.length\n      if (length != b.length) {\n        return false\n      }\n      for (i = length; i-- !== 0; ) {\n        if (!tea.deepEquals(a[i], b[i])) {\n          return false\n        }\n      }\n\n      return true\n    }\n\n    // START: Modifications:\n    // 1. Extra `has<Type> &&` helpers in initial condition allow es6 code\n    //    to co-exist with es5.\n    // 2. Replace `for of` with es5 compliant iteration using `for`.\n    //    Basically, take:\n    //\n    //    ```js\n    //    for (i of a.entries())\n    //      if (!b.has(i[0])) return false;\n    //    ```\n    //\n    //    ... and convert to:\n    //\n    //    ```js\n    //    it = a.entries();\n    //    while (!(i = it.next()).done)\n    //      if (!b.has(i.value[0])) return false;\n    //    ```\n    //\n    //    **Note**: `i` access switches to `i.value`.\n    var it\n\n    if (hasMap && a instanceof Map && b instanceof Map) {\n      if (a.size !== b.size) {\n        return false\n      }\n      it = a.entries()\n      while (!(i = it.next()).done) {\n        if (!b.has(i.value[0])) {\n          return false\n        }\n      }\n      it = a.entries()\n      while (!(i = it.next()).done) {\n        if (!tea.deepEquals(i.value[1], b.get(i.value[0]))) {\n          return false\n        }\n      }\n\n      return true\n    }\n\n    if (hasSet && a instanceof Set && b instanceof Set) {\n      if (a.size !== b.size) {\n        return false\n      }\n      it = a.entries()\n      while (!(i = it.next()).done) {\n        if (!b.has(i.value[0])) {\n          return false\n        }\n      }\n\n      return true\n    }\n    // END: Modifications\n\n    if (hasArrayBuffer && ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {\n      length = a.length\n      if (length != b.length) {\n        return false\n      }\n      for (i = length; i-- !== 0; ) {\n        if (a[i] !== b[i]) {\n          return false\n        }\n      }\n\n      return true\n    }\n\n    if (a.constructor === RegExp) {\n      return a.source === b.source && a.flags === b.flags\n    }\n    if (a.valueOf !== Object.prototype.valueOf) {\n      return a.valueOf() === b.valueOf()\n    }\n    if (a.toString !== Object.prototype.toString) {\n      return a.toString() === b.toString()\n    }\n\n    keys = Object.keys(a)\n    length = keys.length\n    if (length !== Object.keys(b).length) {\n      return false\n    }\n\n    for (i = length; i-- !== 0; ) {\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) {\n        return false\n      }\n    }\n    // START: react-fast-compare:\n    // enable custom handling for DOM elements\n    if (hasElementType && a instanceof Element) {\n      return false\n    }\n    // enable custom handling for React\n    for (i = length; i-- !== 0; ) {\n      if (keys[i] === \"_owner\" && a.$$typeof) {\n        // React-specific: avoid traversing React elements' _owner.\n        //  _owner contains circular references\n        // and is not needed when comparing the actual elements (and not their owners)\n        // .$$typeof and ._store on just reasonable markers of a react element\n        continue\n      }\n\n      // all other properties should be traversed as usual\n      if (!tea.deepEquals(a[keys[i]], b[keys[i]])) {\n        return false\n      }\n    }\n    // END: react-fast-compare\n    return true\n  }\n\n  return a !== a && b !== b\n}\n// end fast-deep-equal\n\n// wrapper around tea.deepEquals\ntea.isEqual = function(a, b) {\n  try {\n    return tea.deepEquals(a, b)\n  } catch (error) {\n    if ((error.message || \"\").match(/stack|recursion/i)) {\n      // warn on circular references, don't crash\n      // browsers give this different errors name and messages:\n      // chrome/safari: \"RangeError\", \"Maximum call stack size exceeded\"\n      // firefox: \"InternalError\", too much recursion\"\n      // edge: \"Error\", \"Out of stack space\"\n      console.warn(\"tea.isEqual() cannot handle circular refs\")\n\n      return false\n    }\n    // some other error. we should definitely know about these\n    throw error\n  }\n}\n\n// function that accepts an object containing 'msg', actual', 'expected'\ntea.assert = function(options) {\n  if (options === undefined) {\n    options = {}\n  }\n\n  return tea.assertHarness(\n    options.actual === (options.expected || true),\n    options.message,\n    options.actual,\n    options.expected || true,\n    options.operator || \"strict equals\"\n  )\n}\n\ntea.assert.deepEquals = function(msg, a, b) {\n  return tea.assertHarness(tea.isEqual(a, b), msg, a, b, \"deep equals\")\n}\n\ntea.assert.equals = function(msg, a, b) {\n  return tea.assertHarness(a == b, msg, a, b, \"equals\")\n}\n\ntea.assert.eq = tea.assert.equals\n\ntea.assert.strictEquals = function(msg, a, b) {\n  return tea.assertHarness(a === b, msg, a, b, \"strict equals\")\n}\n\ntea.assert.isType = function(msg, a, b) {\n  return tea.assertHarness(typeof a === b, msg, typeof a, b, \"typeof \" + b)\n}\n\ntea.assert.truthy = function(msg, a, b) {\n  return tea.assertHarness(Boolean(a), msg, a, \"truthy\", \"truthy\")\n}\n\ntea.assert.falsey = function(msg, a, b) {\n  return tea.assertHarness(!a, msg, a, \"falsey\", \"falsey\")\n}\n\n// from: react/packages/shared/ReactSymbols.js\n//   The Symbol used to tag the ReactElement-like types. If there is no native Symbol\n//   nor polyfill, then a plain number is used for performance.\ntea.hasSymbol = typeof Symbol === \"function\" && Symbol.for\ntea.REACT_ELEMENT_TYPE = tea.hasSymbol ? Symbol.for(\"react.element\") : 0xeac7\n\ntea.assert.isReactElement = function(msg, a, b) {\n  return tea.assertHarness(\n    typeof a === \"object\" &&\n      a !== null &&\n      a.$$typeof === tea.REACT_ELEMENT_TYPE,\n    msg,\n    typeof a,\n    \"typeof ReactElement\",\n    \"isReactElement\"\n  )\n}\n\n// https://stackoverflow.com/questions/4402272/checking-if-data-is-immutable\ntea.isMutable = function(a) {\n  return a && (typeof a === \"object\" || typeof a === \"function\")\n}\n\ntea.assert.isMutable = function(msg, a, b) {\n  return tea.assertHarness(\n    tea.isMutable(a),\n    msg,\n    typeof a,\n    \"mutable object\",\n    \"isMutable\"\n  )\n}\n\ntea.assert.isImmutable = function(msg, a, b) {\n  return tea.assertHarness(\n    tea.isMutable(a) === false,\n    msg,\n    typeof a,\n    \"immutable object\",\n    \"isImmutable\"\n  )\n}\n\ntea.assert.throwsError = function(msg, a, b) {\n  return tea.assertHarness(\n    a instanceof Error,\n    msg,\n    a instanceof Error,\n    true,\n    \"throwsError\"\n  )\n}\n\n// TAP (Test Anything Protocol) style assertions\ntea.t = {}\ntea.t.plan = function() {\n  return true\n}\ntea.t.end = function() {\n  return true\n}\ntea.t.ok = function(actual) {\n  return tea.assert.truthy(actual + \" is truthy\", actual, true)\n}\ntea.t.notOk = function(actual) {\n  return tea.assert.falsey(actual + \" is falsey\", actual, true)\n}\ntea.t.equal = function(actual, expected) {\n  return tea.assert.equals(actual + \" == \" + expected, actual, expected)\n}\ntea.t.strictEqual = function(actual, expected) {\n  return tea.assert.strictEquals(actual + \" === \" + expected, actual, expected)\n}\ntea.t.deepEqual = function(actual, expected) {\n  return tea.assert.deepEquals(\n    typeof actual + \" deep equals \" + typeof expected,\n    actual,\n    expected\n  )\n}\ntea.t.type = function(a, b) {\n  return tea.assertHarness(\n    typeof a === b,\n    typeof a + \" === typeof \" + b,\n    typeof a,\n    b,\n    \"typeof \" + b\n  )\n}\ntea.t.throws = function(actual, expected) {\n  return tea.assert.throwsError(\"throws Error: \" + actual, actual, expected)\n}\n\n// diff method to show only the changes between 2 objects\n// From: https://vanillajstoolkit.com/helpers/diff/\ntea.diff = function(obj1, obj2) {\n  // Make sure an object to compare is provided\n  if (!obj2 || Object.prototype.toString.call(obj2) !== \"[object Object]\") {\n    return obj1\n  }\n\n  var diffs = {}\n  var key\n\n  var arraysMatch = function(arr1, arr2) {\n    // Check if the arrays are the same length\n    if (arr1.length !== arr2.length) {\n      return false\n    }\n    // Check if all items exist and are in the same order\n    for (var i = 0; i < arr1.length; i++) {\n      if (arr1[i] !== arr2[i]) {\n        return false\n      }\n    }\n    // Otherwise, return true\n    return true\n  }\n\n  var compare = function(item1, item2, key) {\n    // Get the object type\n    var type1 = Object.prototype.toString.call(item1)\n    var type2 = Object.prototype.toString.call(item2)\n    // If type2 is undefined it has been removed\n\n    if (type2 === \"[object Undefined]\") {\n      diffs[key] = null\n\n      return\n    }\n    // If items are different types\n    if (type1 !== type2) {\n      diffs[key] = item2\n\n      return\n    }\n    // If an object, compare recursively\n    if (type1 === \"[object Object]\") {\n      var objDiff = tea.diff(item1, item2)\n\n      if (Object.keys(objDiff).length > 0) {\n        diffs[key] = objDiff\n      }\n\n      return\n    }\n    // If an array, compare\n    if (type1 === \"[object Array]\") {\n      if (!arraysMatch(item1, item2)) {\n        diffs[key] = item2\n      }\n\n      return\n    }\n    // Else if it's a function, convert to a string and compare\n    // Otherwise, just compare\n    if (type1 === \"[object Function]\") {\n      if (item1.toString() !== item2.toString()) {\n        diffs[key] = item2\n      }\n    } else if (item1 !== item2) {\n      diffs[key] = item2\n    }\n  }\n  // Compare our objects:\n  // - Loop through the first object\n\n  for (key in obj1) {\n    if (obj1.hasOwnProperty(key)) {\n      compare(obj1[key], obj2[key], key)\n    }\n  }\n  // - Loop through the second object and find missing items\n  for (key in obj2) {\n    if (obj2.hasOwnProperty(key)) {\n      if (!obj1[key] && obj1[key] !== obj2[key]) {\n        diffs[key] = obj2[key]\n      }\n    }\n  }\n  // Return the object of differences\n  return diffs\n}\n\n// run each test, record each test and its results to testResults array\ntea.run = function() {\n  var start = new Date().getTime()\n\n  // reset results\n  tea.currentTest = {}\n  tea.testResults = []\n  tea.assertions = []\n  tea.passes = 0\n  tea.fails = 0\n\n  if (typeof tea.test.beforeAll === \"function\") {\n    tea.test.beforeAll()\n  }\n\n  tea.tests.forEach(function(test) {\n    // reset assertions for this test\n    test.assertions = []\n    // set current\n    tea.currentTest = test\n    if (typeof tea.test.beforeEach === \"function\") {\n      tea.test.beforeEach()\n    }\n\n    // if a 3rd param (expected) was given, run the test against the expected value\n    if (test.expected !== \"nowt\") {\n      var testResult = typeof test.fn === \"function\" ? test.fn() : test.fn\n\n      if (testResult !== test.expected) {\n        var theError = new AssertionError(\n          test.msg,\n          test.fn,\n          test.expected,\n          \"===\"\n        )\n\n        test.passes = 0\n        test.fails = 1\n        test.total = 1\n        test.status = \"FAIL\"\n        test.result = theError\n        test.stack = theError.stack\n        test.assertions = [\n          {\n            msg: test.msg,\n            actual: testResult,\n            expected: test.expected,\n            operator: \"===\",\n            result: new Error(test.msg)\n          }\n        ]\n      } else {\n        test.passes = 1\n        test.fails = 0\n        test.total = 1\n        test.status = \"pass\"\n        ;(test.result = true),\n          (test.assertions = [\n            {\n              msg: test.msg,\n              actual: testResult,\n              expected: test.expected,\n              operator: \"===\",\n              result: true\n            }\n          ])\n      }\n\n      // test has no 'expected' param\n    } else if (typeof test.fn === \"function\") {\n      try {\n        // run the func containing the assertions\n        test.fn(tea.t)\n      } catch (e) {\n        test.result = e\n        tea.log.fail(\"ERROR IN TEST\", \" '\" + test.msg + \"'\")\n        console.error({\n          msg: test.msg,\n          result: e\n        })\n        if (tea.isNode) {\n          process.exit()\n        }\n      }\n    } else {\n      // no assertion method used..\n      this.result = test.fn\n      if (this.result) {\n        test.total += 1\n        test.passes += 1\n        test.assertions.push({\n          result: this.result,\n          msg: test.msg\n        })\n      } else {\n        var err = new Error(test.msg)\n\n        test.total += 1\n        test.fails += 1\n        test.assertions.push({\n          result: err,\n          msg: test.msg\n        })\n      }\n    }\n\n    // get list of assertion failures in this test,\n    var failures = test.assertions.filter(function(assertion) {\n      return assertion.result !== true\n    })\n    // and assign the first failing assertion to the test result and stack trace\n\n    if (failures.length > 0) {\n      test.status = \"FAIL\"\n      test.result = failures[0].result\n    }\n\n    // dont log groups as failed tests\n    if (test.group === true) {\n      test.fails -= 1\n      test.result = \"\"\n      test.status = \"pass\"\n    }\n\n    // report the results\n    tea.report([test])\n\n    if (typeof tea.test.afterEach === \"function\") {\n      tea.test.afterEach()\n    }\n\n    // add to testResults object (reportSummary uses it)\n    if (!test.group) {\n      tea.testResults.push(test)\n    }\n\n    // if --fail-fast was given, exit after the first failed test\n    if (tea.failFast === true && test.status === \"FAIL\" && !test.group) {\n      tea.timeTaken = new Date().getTime() - start\n      tea.reportSummary()\n      if (tea.isNode) {\n        process.exit()\n      } else {\n        throw new Error(\"test failed!\")\n      }\n    }\n  })\n\n  // all tests now finished...\n  if (typeof tea.test.afterAll === \"function\") {\n    tea.test.afterAll()\n  }\n  tea.currentTest = {}\n  tea.assertHarness.stack = null\n  tea.timeTaken = new Date().getTime() - start\n  tea.reportSummary()\n}\n\ntea.addIndent = function() {\n  for (var i = 0; i < tea.indent; i++) {\n    tea.indentStr += \" \"\n  }\n}\n\ntea.rmIndent = function() {\n  for (var i = 0; i < tea.indent; i++) {\n    tea.indentStr = tea.indentStr.slice(0, -1)\n  }\n}\n\n// logger: supports styled (colours and bold) text in both DevTools and terminals\n//  - based on https://jackcrane.github.io/static/cdn/jconsole.js\n//  - added support for NodeJS - uses ANSI colours\ntea.log = function(arg) {\n  console.log(arg)\n}\ntea.log.header = function(arg) {\n  tea.isNode\n    ? console.log(\"\\x1b[33;1m\" + arg + \"\\x1b[0m\")\n    : console.log(\"%c\" + arg, \"font-size:1.25em;font-weight: bold;\")\n}\ntea.log.pass = function(arg, arg2) {\n  tea.isNode\n    ? console.log(\"\\x1b[38;05;34;1m\" + arg + \"\\x1b[0m\" + arg2)\n    : console.log(\n        \"%c\" + arg + \"%c\" + arg2,\n        \"color:green;font-weight: bold;\",\n        \"color:initial;font-weight:normal;\"\n      )\n}\ntea.log.fail = function(arg, arg2) {\n  tea.isNode\n    ? console.log(\"\\x1b[31;1m\" + arg + \"\\x1b[0m\" + arg2)\n    : console.log(\n        \"%c\" + arg + \"%c\" + arg2,\n        \"color:red;font-weight: bold;\",\n        \"color:initial;font-weight:normal;\"\n      )\n}\ntea.log.bold = function(arg) {\n  tea.isNode\n    ? console.log(\"\\x1b[1m\" + arg + \"\\x1b[0m\")\n    : console.log(\"%c\" + arg, \"font-weight: bold;\")\n}\n\n// this summary is appended to end of results, and printed once, at end of tests\ntea.reportSummary = function() {\n  if (tea.reportFormat === \"tap\") {\n    var fails = []\n\n    tea.testResults.forEach(function(test) {\n      if (test.status === \"FAIL\") {\n        return fails.push(test.msg)\n      }\n    })\n\n    var passes = []\n\n    tea.testResults.forEach(function(test) {\n      if (test.status !== \"FAIL\") {\n        return passes.push(test.msg)\n      }\n    })\n    console.log(\"\\n\")\n    console.log(\"1..\" + tea.testResults.length)\n    console.log(\"# tests \" + tea.testResults.length)\n    console.log(\"# pass \" + passes.length, \"\")\n    console.log(\"# fail \" + fails.length)\n  } else {\n    if (tea.noTotals !== true) {\n      console.log(\"-------------------------\")\n      tea.log(\"Total tests:  \" + tea.testResults.length)\n      tea.log(\"Total time:   \" + tea.timeTaken + \"ms\")\n      console.log(\"-------------------------\")\n    }\n  }\n}\n\n// format the results, then report in given format\ntea.report = function(testResults) {\n  var results = []\n  var format = tea.reportFormat || \"console\"\n\n  // re-format results (keep only bits we want)\n  testResults.forEach(function(result) {\n    results.push({\n      group: result.group || false,\n      msg: result.msg,\n      indentStr: result.indentStr,\n      status: result.status || \"Unknown!\",\n      assertions: result.assertions || \"\",\n      passes: result.passes || 0,\n      fails: result.fails || 0,\n      result: result.result || \"ok\"\n    })\n  })\n\n  // output using ANSI colours (terminal), or CSS colours (Dev Tools)\n  if (format === \"console\") {\n    tea.reportConsole(results)\n  }\n  // output TAP format\n  if (format === \"tap\") {\n    tea.reportTap(results)\n  }\n  // output console.table\n  if (format === \"debug\") {\n    tea.reportDebug(results)\n  }\n}\n\ntea.reportConsole = function(testResults) {\n  testResults.forEach(function(test, n) {\n    var failed = test.assertions.filter(function(assertion, i) {\n      return assertion.result.toString().indexOf(\"Error\") !== -1\n    })\n\n    var newline = \"\"\n\n    // only print the test header if we have results to print\n    if ((tea.quiet === true && failed.length > 0) || tea.quiet === false) {\n      tea.log.header(test.indentStr + test.msg)\n      newline = \" \"\n    }\n\n    test.assertions.forEach(function(assertion, i) {\n      assertionFailed = false\n      if (assertion.result.toString().indexOf(\"Error\") !== -1) {\n        assertionFailed = true\n      }\n\n      // if --quiet, and no failures, skip reporting the passes\n      if (assertionFailed === false && tea.quiet) {\n        return\n      }\n\n      // only print any results if an actual test with results (and not just a group)\n      if (!test.group) {\n        if (assertionFailed === false) {\n          tea.log.pass(test.indentStr + \"  ✔ PASS\", \": \" + assertion.msg)\n        } else {\n          tea.log.fail(test.indentStr + \"  ✘ FAIL\", \": \" + assertion.msg)\n        }\n      }\n\n      // show expected/actual fields for failed assertions:\n      if (assertionFailed === true || tea.args.verbose === true || tea.args.v) {\n        var actual = JSON.stringify(assertion.actual)\n        var expected = JSON.stringify(assertion.expected)\n\n        if (typeof assertion.expected !== \"undefined\") {\n          tea.log(test.indentStr + \"    expected:  \" + expected)\n        }\n        if (typeof assertion.actual !== \"undefined\") {\n          if (expected !== actual) {\n            // if comparing objects or arrays, show a diff\n            if (\n              (typeof assertion.expected === \"object\" ||\n                Array.isArray(assertion.expected)) &&\n              (typeof assertion.actual === \"object\" ||\n                Array.isArray(assertion.actual))\n            ) {\n              var theDiff = tea.diff(assertion.expected, assertion.actual)\n\n              tea.log.bold(\n                test.indentStr + \"    diff:      \" + JSON.stringify(theDiff)\n              )\n            } else {\n              // else, show the actual value (bold)\n              tea.log.bold(test.indentStr + \"    actual:    \" + actual)\n            }\n          } else {\n            // expected and actual value (not bold)\n            tea.log(test.indentStr + \"    actual:    \" + actual)\n          }\n        }\n      }\n    })\n    if (newline === \" \") {\n      tea.log(newline)\n    }\n  })\n}\n\ntea.reportTap = function(testResults) {\n  console.log(\"\")\n  var num = 1\n\n  testResults.forEach(function(test, n) {\n    if (tea.noIndent) {\n      test.indentStr = \"\"\n    }\n\n    tea.log.header(test.indentStr + \"# \" + test.msg)\n\n    var failed = test.assertions.filter(function(assertion, i) {\n      return assertion.result.toString().indexOf(\"Error\") !== -1\n    })\n\n    test.assertions.forEach(function(assertion, i) {\n      assertionFailed = false\n      if (assertion.result.toString().indexOf(\"Error\") !== -1) {\n        assertionFailed = true\n      }\n\n      // if --quiet, and no failures, skip reporting the passes\n      if (assertionFailed === false && tea.quiet) {\n        return\n      }\n\n      // only print any results if an actual test with results (and not just a group)\n      if (!test.group) {\n        if (assertionFailed === false) {\n          tea.log(test.indentStr + \"ok \" + num + \" - \" + assertion.msg)\n        } else {\n          tea.log(test.indentStr + \"not ok \" + num + \" - \" + assertion.msg)\n        }\n      }\n\n      // show expected/actual fields for failed assertions:\n      if (assertionFailed === true || tea.args.verbose === true || tea.args.v) {\n        var actual = JSON.stringify(assertion.actual)\n        var expected = JSON.stringify(assertion.expected)\n\n        tea.log(test.indentStr + \" ---\")\n        tea.log.fail(test.indentStr + \"  operator: \" + assertion.operator, \"\")\n        tea.log.fail(test.indentStr + \"  expected: \" + expected, \"\")\n        tea.log.fail(test.indentStr + \"  actual:   \" + actual, \"\")\n        tea.log(test.indentStr + \" ...\\n\")\n      }\n      num++\n    })\n  })\n}\n\ntea.reportDebug = function(testResults) {\n  if (tea.isNode) {\n    testResults.forEach(function(result) {\n      if (result.group) {\n        return\n      }\n      if (tea.quiet && result.result === \"ok\") {\n        return\n      }\n      console.log(result.msg)\n      console.log(\"  passes:     \" + result.passes)\n      console.log(\"  fails:      \" + result.fails)\n      console.log(\"  status:     \" + result.status)\n      console.log(\"  assertions: \\n \", result.assertions)\n      console.log(\"\\n\")\n    })\n  } else {\n    testResults.forEach(function(result) {\n      if (result.group === true) {\n        return\n      }\n      if (tea.quiet === true && result.result === \"ok\") {\n        return\n      }\n      console.table({\n        test: {\n          msg: result.msg,\n          status: result.status || \"Unknown!\",\n          assertions: result.assertions || \"\",\n          passes: result.passes || 0,\n          fails: result.fails || 0,\n          result: result.result || \"ok\"\n        }\n      })\n    })\n  }\n}\n\nmodule.exports = tea\n"],"names":["AssertionError","message","actual","expected","operator","error","Error","call","this","name","stack","prototype","Object","create","constructor","toString","captureStackTrace","container","defineProperty","configurable","get","value","global","Function","e","tea","args","isNode","getArgs","isBrowser","console","clear","scenario","group","feature","test","expect","assert","t","run","describe","it","should","given","when","then","window","document","isWebWorker","process","versions","node","argv","slice","length","forEach","arg","longArg","split","longArgFlag","flag","setArgs","keys","key","noIndent","quiet","noTotals","failFast","reportFormat","log","exit","tests","testResults","passes","fails","indent","indentStr","currentTest","msg","fn","push","addIndent","rmIndent","undefined","status","assertions","total","result","beforeAll","beforeEach","afterAll","afterEach","assertHarness","assertion","toLowerCase","Boolean","deepEquals","a","b","hasElementType","Element","hasMap","Map","hasSet","Set","hasArrayBuffer","ArrayBuffer","i","Array","isArray","size","entries","next","done","has","isView","RegExp","source","flags","valueOf","hasOwnProperty","$$typeof","isEqual","match","warn","options","equals","eq","strictEquals","isType","truthy","falsey","hasSymbol","Symbol","for","REACT_ELEMENT_TYPE","isReactElement","isMutable","isImmutable","throwsError","plan","end","ok","notOk","equal","strictEqual","deepEqual","type","throws","diff","obj1","obj2","diffs","compare","item1","item2","type1","type2","arr1","arr2","arraysMatch","objDiff","start","Date","getTime","testResult","theError","fail","err","failures","filter","report","timeTaken","reportSummary","header","pass","arg2","bold","results","format","reportConsole","reportTap","reportDebug","n","failed","indexOf","newline","assertionFailed","verbose","v","JSON","stringify","theDiff","num","table","module","exports"],"mappings":"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"}